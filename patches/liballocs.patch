From 533b790930f51127523d186e68641dec40c061ad Mon Sep 17 00:00:00 2001
From: Richard Tynan <richard@tynan.me>
Date: Thu, 16 Feb 2017 01:37:32 +0000
Subject: [PATCH 1/9] Removed linuxism in Makefile.am

---
 Makefile.am | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Makefile.am b/Makefile.am
index c12b321..c2a62ac 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -7,7 +7,7 @@ AM_CXXFLAGS = -std=c++11 -ggdb -fkeep-inline-functions -O2 -Wall -Wno-deprecated
 
 AM_CFLAGS = -Wall -std=gnu99 -ggdb -O3 -flto -Iinclude -fPIC -Wp,-w
 
-AM_LDFLAGS = -Wl,--no-as-needed -lstdc++ -lm -lboost_regex $(DWARFIDL_LIBS) $(LIBCXXGEN_LIBS) $(LIBDWARFPP_LIBS) $(LIBSRK31CXX_LIBS) $(LIBCXXFILENO_LIBS) -ldl
+AM_LDFLAGS = -Wl,--no-as-needed -lstdc++ -lm -lboost_regex $(DWARFIDL_LIBS) $(LIBCXXGEN_LIBS) $(LIBDWARFPP_LIBS) $(LIBSRK31CXX_LIBS) $(LIBCXXFILENO_LIBS)
 
 extra_DIST = liballocs.pc.in
 pkgconfigdir = $(libdir)/pkgconfig
-- 
2.9.0


From 7550da1ea788f1de648a141dd21dcb3ea2929ebc Mon Sep 17 00:00:00 2001
From: Richard Tynan <richard@tynan.me>
Date: Thu, 16 Feb 2017 01:38:06 +0000
Subject: [PATCH 2/9] Removed linuxism in used-types-funcs.sh

---
 tools/used-types-funcs.sh | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/tools/used-types-funcs.sh b/tools/used-types-funcs.sh
index 2dbc327..c3ed8e7 100755
--- a/tools/used-types-funcs.sh
+++ b/tools/used-types-funcs.sh
@@ -26,7 +26,9 @@ OBJCOPY=${OBJCOPY:-$(which objcopy)}
 compile () {
    src="$1"
    dest="$2"
-   asm="$( mktemp --suffix=.s )"
+   asm="$( mktemp )"
+   asm="$asm.s"
+   touch $asm
    ${CC} -S -x c -o "$asm" "$src" && \
    ${CC} -c -o "$dest" "$asm" && \
    echo "Compiler generated $dest" 1>&2
-- 
2.9.0


From 05c25fba38ab1464e432fe94a9e92365aff7de40 Mon Sep 17 00:00:00 2001
From: Richard Tynan <richard@tynan.me>
Date: Thu, 16 Feb 2017 01:39:03 +0000
Subject: [PATCH 3/9] Added blacklist in main of allocscompilerwrapper. Should
 probably merge other blacklist in crunchcc to here.

---
 tools/allocscompilerwrapper.py | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/tools/allocscompilerwrapper.py b/tools/allocscompilerwrapper.py
index 462a13c..776090c 100644
--- a/tools/allocscompilerwrapper.py
+++ b/tools/allocscompilerwrapper.py
@@ -239,6 +239,24 @@ class AllocsCompilerWrapper(CompilerWrapper):
         else:
             self.debugMsg("We are not a link command\n")
 
+        # rpt
+        blacklist = [
+            # Hack used by FreeBSD kernel, contains nothing.
+            'hack.c',
+        ]
+        self.debugMsg("trying overall blacklist" + str(sourceInputFiles) + '\n')
+        anyblacklisted = False
+        for blsource in blacklist:
+            for source in sourceInputFiles:
+                anyblacklisted |= source.endswith(blsource)
+        if anyblacklisted:
+            self.debugMsg('Overall blacklist, so calling compiler straight\n')
+            self.debugMsg(str(sourceInputFiles))
+            self.debugMsg(str(sys.argv[1:]))
+            ret = self.runUnderlyingCompiler(sourceInputFiles, sys.argv[1:])
+            return ret
+
+
         # If we're a linker command, then we have to handle allocation functions
         # specially.
         # Each allocation function, e.g. xmalloc, is linked with --wrap.
@@ -516,7 +534,6 @@ class AllocsCompilerWrapper(CompilerWrapper):
         # We did succeed, so we need to fix up the output binary's 
         # __uniqtype references to the actual binary-compatible type
         # definitions which the compiler generated.
-
         if not isLinkCommand:
             if not self.commandStopsBeforeObjectOutput():
                 if outputFile:
-- 
2.9.0


From 5ff15f9f8e541363cc5869a46be58b4f28b511c8 Mon Sep 17 00:00:00 2001
From: Richard Tynan <richard@tynan.me>
Date: Thu, 16 Feb 2017 01:39:49 +0000
Subject: [PATCH 4/9] link-used-types to not perform used-types as we're using
 dumptypes instead, and it's causing errors.

---
 tools/lang/c/bin/link-used-types | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/tools/lang/c/bin/link-used-types b/tools/lang/c/bin/link-used-types
index 6bb591a..1263ff5 100755
--- a/tools/lang/c/bin/link-used-types
+++ b/tools/lang/c/bin/link-used-types
@@ -40,11 +40,13 @@ sed -r 's/[[:blank:]]*[Uw][[:blank:]]*$//' | grep __uniqtype__ )"
     fi
 }
 
+   # ${USEDTYPES} "$objfile" > "$usedtypes_src" && \
+   # rpt
 echo ${USEDTYPES} "$objfile" 1>&2 # for debugging
 (  objcopy_and_redefine_c_names "$objfile" && \
    echo "Successfully did objcopy_and_redefine_c_names" 1>&2 && \
    echo ${USEDTYPES} "$objfile" 1>&2 && \
-   ${USEDTYPES} "$objfile" > "$usedtypes_src" && \
+   touch "$usedtypes_src" && \
    echo "Successfully did usedtypes" 1>&2 && \
    compile "$usedtypes_src" "$usedtypes_obj" && \
    echo "Successfully did compile" 1>&2 && \
-- 
2.9.0


From 121494342fa7560112275122d813f8db03732c73 Mon Sep 17 00:00:00 2001
From: Richard Tynan <richard@tynan.me>
Date: Mon, 20 Feb 2017 23:28:55 +0000
Subject: [PATCH 5/9] Cleaned up blacklist, etc, now crunchcc doesn't have a
 blacklist

---
 tools/allocscompilerwrapper.py | 55 +++++++++++++++++++++++++++++++++++++-----
 1 file changed, 49 insertions(+), 6 deletions(-)

diff --git a/tools/allocscompilerwrapper.py b/tools/allocscompilerwrapper.py
index 776090c..3cf402c 100644
--- a/tools/allocscompilerwrapper.py
+++ b/tools/allocscompilerwrapper.py
@@ -240,21 +240,64 @@ class AllocsCompilerWrapper(CompilerWrapper):
             self.debugMsg("We are not a link command\n")
 
         # rpt
+        # -------------------------------------------------------------------- #
+
+        # gcc doesn't have support for these options and they're safe to
+        # ignore.
+        arg_blacklist = ['-Qunused-arguments']
+        sys.argv = [arg for arg in sys.argv if arg not in arg_blacklist]
+
+        # Here be blacklisting files.
         blacklist = [
             # Hack used by FreeBSD kernel, contains nothing.
             'hack.c',
+            # Because extern symbols weren't being treated by cilly properly,
+            # causing them to be undefined in other objects.
+            'ixgbe_osdep.c',
+            'kern_umtx.c',
+            'tcp_input.c',
+            # These cause page faults for some unknown reason and I had to
+            # binary bisect by building the kernel to find them...
+            'ufs_vnops.c',
+            'ffs_softdep.c',
+            # For some reason I need to blacklist some of these (might not be
+            # all of them, haven't checked yet), or it page faults when I
+            # crunchcc all the other files.
+            'ufs_acl.o',
+            'ufs_bmap.o',
+            'ufs_dirhash.o',
+            'ufs_extattr.o',
+            'ufs_gjournal.o',
+            'ufs_inode.o',
+            'ufs_lookup.o',
+            'ufs_quota.o',
+            'ufs_vfsops.o',
+            'ufs_vnops.o',
         ]
-        self.debugMsg("trying overall blacklist" + str(sourceInputFiles) + '\n')
+
+        self.debugMsg("Trying blacklist" + str(sourceInputFiles) + '\n')
         anyblacklisted = False
         for blsource in blacklist:
             for source in sourceInputFiles:
                 anyblacklisted |= source.endswith(blsource)
+
         if anyblacklisted:
-            self.debugMsg('Overall blacklist, so calling compiler straight\n')
-            self.debugMsg(str(sourceInputFiles))
-            self.debugMsg(str(sys.argv[1:]))
-            ret = self.runUnderlyingCompiler(sourceInputFiles, sys.argv[1:])
-            return ret
+            alternativeCommand = ['/usr/local/bin/gcc'] + [
+                s for s in sys.argv[1:]
+                if not s.endswith('cilly') and not s.startswith('--')
+            ]
+            self.debugMsg('Blacklisted, so calling compiler straight with '
+                          'this command: {}\n'.format(alternativeCommand))
+            return subprocess.call(alternativeCommand)
+
+        # cilly doesn't like --sysroot, so we add --ccargs before it to tell
+        # cilly to pass it straight on to the underlying compiler.
+        # Note: this is done after the blacklist as we don't want to pass
+        # --ccargs to gcc.
+        sys.argv = [arg.replace('--sysroot', '--ccargs=--sysroot')
+                    for arg in sys.argv]
+
+        # -------------------------------------------------------------------- #
 
 
         # If we're a linker command, then we have to handle allocation functions
-- 
2.9.0


From f2df193ce5c84072435fc455cc1ae3abb2ec1f87 Mon Sep 17 00:00:00 2001
From: Richard Tynan <richard@tynan.me>
Date: Mon, 20 Feb 2017 23:29:19 +0000
Subject: [PATCH 6/9] Changed include to match freebsd's src

---
 include/uniqtype-defs.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/include/uniqtype-defs.h b/include/uniqtype-defs.h
index 9302802..acf432a 100644
--- a/include/uniqtype-defs.h
+++ b/include/uniqtype-defs.h
@@ -29,7 +29,7 @@ of or in connection with the use or performance of this software.
 extern "C" {
 #endif
 
-#include <stddef.h>
+#include <sys/stddef.h>
 /* Don't include any inline functions before we've defined *our* inlines,
  * or they'll get instrumented by CIL passes and create lots of implicit-declaration
  * problems. Since our inline function needs some includes, we put them at the bottom. */
-- 
2.9.0


From 2547d57c6f6757cff7e68bd9c286718cb31269c7 Mon Sep 17 00:00:00 2001
From: Richard Tynan <richard@tynan.me>
Date: Sat, 25 Feb 2017 00:51:57 +0000
Subject: [PATCH 7/9] Fix for KTR breakages

---
 tools/allocscompilerwrapper.py | 47 +++++++++++++++++++++++++++++++++---------
 1 file changed, 37 insertions(+), 10 deletions(-)

diff --git a/tools/allocscompilerwrapper.py b/tools/allocscompilerwrapper.py
index 3cf402c..1f19637 100644
--- a/tools/allocscompilerwrapper.py
+++ b/tools/allocscompilerwrapper.py
@@ -263,16 +263,43 @@ class AllocsCompilerWrapper(CompilerWrapper):
             # For some reason I need to blacklist some of these (might not be
             # all of them, haven't checked yet), or it page faults when I
             # crunchcc all the other files.
-            'ufs_acl.o',
-            'ufs_bmap.o',
-            'ufs_dirhash.o',
-            'ufs_extattr.o',
-            'ufs_gjournal.o',
-            'ufs_inode.o',
-            'ufs_lookup.o',
-            'ufs_quota.o',
-            'ufs_vfsops.o',
-            'ufs_vnops.o',
+            'ufs_acl.c',
+            'ufs_bmap.c',
+            'ufs_dirhash.c',
+            'ufs_extattr.c',
+            'ufs_gjournal.c',
+            'ufs_inode.c',
+            'ufs_lookup.c',
+            'ufs_quota.c',
+            'ufs_vfsops.c',
+            'ufs_vnops.c',
+            # Build with KTR support for some reason only works if I blacklist
+            # these (potentially could cut out some of the x*.o files).
+            'init_main.o',
+            'subr_prof.o',
+            'kern_ktr.o',
+            'x86bios.o',
+            'x86emu.o',
+            'xdr.o',
+            'xdr_array.o',
+            'xdr_mbuf.o',
+            'xdr_mem.o',
+            'xdr_reference.o',
+            'xdr_sizeof.o',
+            'xen_intr.o',
+            'xenbus.o',
+            'xenbus_if.o',
+            'xenbusb.o',
+            'xenbusb_back.o',
+            'xenbusb_front.o',
+            'xenbusb_if.o',
+            'xenpci.o',
+            'xenstore.o',
+            'xenstore_dev.o',
+            'xhci.o',
+            'xhci_pci.o',
+            'xlphy.o',
+            'xmphy.o',
         ]
 
         self.debugMsg("Trying blacklist" + str(sourceInputFiles) + '\n')
-- 
2.9.0


From f0affcfa47b68393178987015a9f010fb4823774 Mon Sep 17 00:00:00 2001
From: Richard Tynan <richard@tynan.me>
Date: Sat, 25 Mar 2017 09:40:48 +0000
Subject: [PATCH 8/9] Fixed typo in blacklist

---
 tools/allocscompilerwrapper.py | 50 +++++++++++++++++++++---------------------
 1 file changed, 25 insertions(+), 25 deletions(-)

diff --git a/tools/allocscompilerwrapper.py b/tools/allocscompilerwrapper.py
index 1f19637..6bfa90c 100644
--- a/tools/allocscompilerwrapper.py
+++ b/tools/allocscompilerwrapper.py
@@ -275,31 +275,31 @@ class AllocsCompilerWrapper(CompilerWrapper):
             'ufs_vnops.c',
             # Build with KTR support for some reason only works if I blacklist
             # these (potentially could cut out some of the x*.o files).
-            'init_main.o',
-            'subr_prof.o',
-            'kern_ktr.o',
-            'x86bios.o',
-            'x86emu.o',
-            'xdr.o',
-            'xdr_array.o',
-            'xdr_mbuf.o',
-            'xdr_mem.o',
-            'xdr_reference.o',
-            'xdr_sizeof.o',
-            'xen_intr.o',
-            'xenbus.o',
-            'xenbus_if.o',
-            'xenbusb.o',
-            'xenbusb_back.o',
-            'xenbusb_front.o',
-            'xenbusb_if.o',
-            'xenpci.o',
-            'xenstore.o',
-            'xenstore_dev.o',
-            'xhci.o',
-            'xhci_pci.o',
-            'xlphy.o',
-            'xmphy.o',
+            'init_main.c',
+            'subr_prof.c',
+            'kern_ktr.c',
+            'x86bios.c',
+            'x86emu.c',
+            'xdr.c',
+            'xdr_array.c',
+            'xdr_mbuf.c',
+            'xdr_mem.c',
+            'xdr_reference.c',
+            'xdr_sizeof.c',
+            'xen_intr.c',
+            'xenbus.c',
+            'xenbus_if.c',
+            'xenbusb.c',
+            'xenbusb_back.c',
+            'xenbusb_front.c',
+            'xenbusb_if.c',
+            'xenpci.c',
+            'xenstore.c',
+            'xenstore_dev.c',
+            'xhci.c',
+            'xhci_pci.c',
+            'xlphy.c',
+            'xmphy.c',
         ]
 
         self.debugMsg("Trying blacklist" + str(sourceInputFiles) + '\n')
-- 
2.9.0


From c7f820f88cc29020f381eb3795171a1161cd8454 Mon Sep 17 00:00:00 2001
From: Richard Tynan <richard@tynan.me>
Date: Thu, 11 May 2017 14:08:31 +0100
Subject: [PATCH 9/9] Various fixes

---
 tools/allocscompilerwrapper.py   | 13 +++++++++++++
 tools/gather-srcallocs.sh        |  4 ++--
 tools/lang/c/bin/link-used-types | 18 ++++++++++++++----
 tools/used-types-funcs.sh        | 27 +++++++++++++++++++++++----
 4 files changed, 52 insertions(+), 10 deletions(-)

diff --git a/tools/allocscompilerwrapper.py b/tools/allocscompilerwrapper.py
index 6bfa90c..f003418 100644
--- a/tools/allocscompilerwrapper.py
+++ b/tools/allocscompilerwrapper.py
@@ -300,6 +300,19 @@ class AllocsCompilerWrapper(CompilerWrapper):
             'xhci_pci.c',
             'xlphy.c',
             'xmphy.c',
+            # Our own files implementing libcrunch/liballocs, don't want to
+            # crunch these
+            'liballocs.c',
+            'libcrunch.c',
+            'index_tree.c',
+            'pageindex.c',
+            'generic_malloc.c',
+            'static.c',
+            'typesstack.c',
+            'types1.c',
+            'types2.c',
+            'types3.c',
+            'types4.c',
         ]
 
         self.debugMsg("Trying blacklist" + str(sourceInputFiles) + '\n')
diff --git a/tools/gather-srcallocs.sh b/tools/gather-srcallocs.sh
index 7b620ec..d7d682b 100755
--- a/tools/gather-srcallocs.sh
+++ b/tools/gather-srcallocs.sh
@@ -28,7 +28,7 @@ all_obj_allocs_file="$1"
 
 # Do a per-CU loop over the file and dispatch to a per-language allocs-gatherer
 
-cat "$all_obj_allocs_file" | cut -f1 | sort | uniq | while read obj rest; do
+cat "$all_obj_allocs_file" | cut -f1 | LC_ALL=C sort | uniq | while read obj rest; do
     echo "Saw line $obj $rest" 1>&2
     all_cus_info="$( get_cu_info "$obj" )"
     
@@ -42,4 +42,4 @@ cat "$all_obj_allocs_file" | cut -f1 | sort | uniq | while read obj rest; do
             ;;
         esac
     done
-done | pad_numbers | sort -t$'\t' -k1 -k2 | uniq        #use_src_realpaths | 
+done | pad_numbers | LC_ALL=C sort -t$'\t' -k1 -k2 | uniq        #use_src_realpaths | 
diff --git a/tools/lang/c/bin/link-used-types b/tools/lang/c/bin/link-used-types
index 1263ff5..907d492 100755
--- a/tools/lang/c/bin/link-used-types
+++ b/tools/lang/c/bin/link-used-types
@@ -1,6 +1,11 @@
 #!/bin/bash
 
-objfile="$1"
+if readelf -h $1; then
+	objfile="$1"
+else
+	objfile="/usr/obj/usr/src/sys/CRUNCHED/$(basename $1)"
+fi
+echo "OBJFILE IS $objfile"
 
 test -n "$objfile" || (echo "Please specify an object file"; false) || exit 1
 
@@ -40,20 +45,25 @@ sed -r 's/[[:blank:]]*[Uw][[:blank:]]*$//' | grep __uniqtype__ )"
     fi
 }
 
-   # ${USEDTYPES} "$objfile" > "$usedtypes_src" && \
+   # touch "$usedtypes_src" && \
    # rpt
 echo ${USEDTYPES} "$objfile" 1>&2 # for debugging
 (  objcopy_and_redefine_c_names "$objfile" && \
    echo "Successfully did objcopy_and_redefine_c_names" 1>&2 && \
    echo ${USEDTYPES} "$objfile" 1>&2 && \
-   touch "$usedtypes_src" && \
+   ${USEDTYPES} "$objfile" > "$usedtypes_src" && \
+   sed -i 's/\.data\./.meta./g' "$usedtypes_src"  && \
    echo "Successfully did usedtypes" 1>&2 && \
    compile "$usedtypes_src" "$usedtypes_obj" && \
    echo "Successfully did compile" 1>&2 && \
    objcopy_and_redefine_codeless_names "$objfile" "$usedtypes_obj" && \
    echo "Successfully did objcopy_and_redefine_codeless_names" 1>&2 && \
    link_defining_aliases "$objfile" "$usedtypes_obj" && \
-   echo "Successfully did link_defining_aliases" 1>&2 ) || \
+   echo "Successfully did link_defining_aliases" 1>&2 && \
+   objcopy_move_types_to_meta "$objfile" && \
+   echo "Successfully did objcopy_move_types_to_meta" 1>&2 && \
+   objcopy_weaken_void "$objfile" && \
+   echo "Successfully weakened __uniqtype__void* symbols" 1>&2 ) || \
     (echo NOT REALLY rm -f "$objfile" 1>&2 ; exit 1)
 
 # rm -f "$usedtypes_src" "$usedtypes_obj"
diff --git a/tools/used-types-funcs.sh b/tools/used-types-funcs.sh
index c3ed8e7..9c29c1f 100755
--- a/tools/used-types-funcs.sh
+++ b/tools/used-types-funcs.sh
@@ -29,8 +29,10 @@ compile () {
    asm="$( mktemp )"
    asm="$asm.s"
    touch $asm
-   ${CC} -S -x c -o "$asm" "$src" && \
-   ${CC} -c -o "$dest" "$asm" && \
+   # ${CC} -S -x c -o "$asm" "$src" && \
+   # ${CC} -c -o "$dest" "$asm" && \
+   /usr/local/bin/gcc -S -x c -o "$asm" "$src" && \
+   /usr/local/bin/gcc -c -o "$dest" "$asm" && \
    echo "Compiler generated $dest" 1>&2
 }
 
@@ -58,10 +60,27 @@ symbol_redefinitions () {
 objcopy_and_redefine_codeless_names () {
     our_objfile="$1"
     our_usedtypes_obj="$2"
-    
+
     # now, fill in the codeful names for codeless ones
-    second_redefinition_args="$( symbol_redefinitions "$our_usedtypes_obj" )" && \
+    second_redefinition_args="$( symbol_redefinitions  "$our_usedtypes_obj" )" && \
     echo ${OBJCOPY} $second_redefinition_args "$our_objfile" 1>&2 && \
     ${OBJCOPY} $second_redefinition_args "$our_objfile" && \
     echo "objcopy renamed symbols in $our_objfile according to $second_redefinition_args" 1>&2
 }
+
+# To prevent multiple definitions of uniqtype void errors
+objcopy_weaken_void () {
+	our_objfile="$1"
+	${OBJCOPY} --weaken-symbol=__uniqtype__void_subobj_names \
+		--weaken-symbol=__uniqtype__void "$our_objfile"
+}
+
+# Because types end up in .meta when the dumptypes are linked in, they should
+# be moved to .meta for the first build
+objcopy_move_types_to_meta () {
+    our_objfile="$1"
+	objdump -t "$our_objfile" | egrep "__uniqtype_[0-9a-f]{8}" \
+		| tr -s "[:blank:]" "\t" | cut -d '	' -f 6 \
+		| sed 's/^.\(.*\)/\n--rename-section \.data\.\1=\.meta\.\1/' \
+		| xargs -n 100 objcopy "$our_objfile"
+}
-- 
2.9.0

